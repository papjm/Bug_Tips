one way of confirming that the application is interacting with a backend database is to submit the SQL wildcard character % in a given parameter. 
For example, submitting this in a search fi eld often returns a large number of 
results, indicating that the input is being passed into a SQL query. Of course, 
this does not necessarily indicate that the application is vulnerable â€” only that 
you should probe further to identify any actual flaws.


While looking for SQL injection using a single quote, keep an eye 
out for any JavaScript errors occurring when your browser processes the 
returned page. It is fairly common for user-supplied input to be returned 
within JavaScript, and an unsanitized single quote will cause an error in the 
JavaScript interpreter, just as it does in the SQL interpreter. The ability to 
inject arbitrary JavaScript into responses allows cross-site scripting attacks, as 
described in Chapter 12.
