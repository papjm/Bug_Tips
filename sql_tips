one way of confirming that the application is interacting with a backend database is to submit the SQL wildcard character % in a given parameter. 
For example, submitting this in a search fi eld often returns a large number of 
results, indicating that the input is being passed into a SQL query. Of course, 
this does not necessarily indicate that the application is vulnerable — only that 
you should probe further to identify any actual flaws.


While looking for SQL injection using a single quote, keep an eye 
out for any JavaScript errors occurring when your browser processes the 
returned page. It is fairly common for user-supplied input to be returned 
within JavaScript, and an unsanitized single quote will cause an error in the 
JavaScript interpreter, just as it does in the SQL interpreter. The ability to 
inject arbitrary JavaScript into responses allows cross-site scripting attacks


for numeric parameters (1,2,3,4) try mathematical expressions like 1+1(a vulnerable sql database would return 2).. you can also try ascii characters. the ascii character for "A" is 65, 
so the following payload should return 2. 67-ASCII(‘A’)..

The preceding test will not work if single quotes are being filtered. 
However, in this situation you can exploit the fact that databases implicitly convert numeric data to string data where required. Hence, because 
the ASCII value of the character 1 is 49, the following expression is equivalent to 2 in SQL:
51-ASCII(1).

 A common mistake when probing an application for defects such as SQL 
injection is to forget that certain characters have special meaning within HTTP 
requests. If you want to include these characters within your attack payloads, 
you must be careful to URL-encode them to ensure that they are interpreted in 
the way you intend. In particular:

& and = are used to join name/value pairs to create the query string and 
the block of POST data. You should encode them using %26 and %3d,
respectively.
n Literal spaces are not allowed in the query string. If they are submitted, 
they will effectively terminate the entire string. You should encode them 
using + or %20.
n Because + is used to encode spaces, if you want to include an actual +
in your string, you must encode it using %2b. In the previous numeric 
example, therefore, 1+1 should be submitted as 1%2b1.
